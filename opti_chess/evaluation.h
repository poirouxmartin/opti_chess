// Evaluateur de position (heuristiques)
class Evaluator {
public:

	// Paramètres d'évaluation

	// Coefficients des heuristiques
	float _piece_value = 1.2f;
	float _piece_mobility = 0.0002f;
	float _piece_positioning = 0.0045f;
	float _random_add = 0.0f;
	float _bishop_pair = 0.25f;
	float _castling_rights = 0.0f;
	float _player_trait = 0.20f;
	float _king_safety = 0.0005f;
	float _pawn_structure = 0.004f;
	float _attacks = 0.01f;
	float _defenses = 0.0015f;
	float _kings_opposition = 0.75f;
	float _push = 1.00f;
	float _rook_open = 0.003f;
	float _square_controls = 0.0025f;
	float _space_advantage = 0.01f;
	//float _alignments = 0.01f;
	float _alignments = 0.00f;
	float _piece_activity = 0.0005f;

	// Valeurs des pièces en début de partie (pion, cavalier, fou, tour, dame, roi)
	int _pieces_value_begin[6] = { 72, 335, 340, 460, 980, 0 };

	// Valeurs en fin de partie
	int _pieces_value_end[6] = { 105, 310, 350, 585, 1020, 0 };

	// Positionnement des pièces

	// En début de partie
	int _pieces_pos_begin[6][8][8]{
		// pion
		{
			{   0,    0,    0,    0,    0,    0,    0,    0},
			{  78,   83,   86,  130,  130,   82,   85,   90},
			{  37,   29,   21,  120,  125,   60,   44,   57},
			{  10,   16,   20,   75,   80,   30,   35,   33},
			{  -5,   10,   45,   50,   65,   10,  -30,  -23},
			{ -25,    0,   30,   25,   35,  -35,   20,  -10},
			{ -30,   20,  -40,  -15,  -20,   20,   20,  -20},
			{   0,    0,    0,    0,    0,    0,    0,    0}   },

			// cavalier
			{
				{ -80,  -53,  -75,  -75,  -10,  -55,  -58,  -70},
				{  -3,   -6,   50,  -36,    4,   62,   -4,  -14},
				{ -10,   67,   25,   70,   80,   60,   62,   40},
				{ -10,   24,   40,   65,   65,   50,   15,   20},
				{ -10,    5,   31,   45,   40,   30,    2,    0},
				{ -18,   10,   25,   22,   18,   45,   20,  -14},
				{ -40,  -30,    2,    5,    2,    0,  -23,  -25},
				{ -74,  -35,  -36,  -34,  -19,  -25,  -75,  -59}   },

				// fou
				{
					{ -29,  -39,  -41,  -38,  -12,  -53,  -18,  -25},
					{  -5,   10,   17,  -21,  -19,   15,    1,  -11},
					{  -4,   19,  -16,   20,   26,   -5,   14,   -7},
					{  12,   10,   10,   17,   13,   12,   10,    5},
					{   6,    5,   17,   11,    8,   15,    0,    8},
					{   7,   12,   17,   15,   12,   22,   10,    7},
					{   9,   25,    5,    5,   10,    3,   32,    8},
					{ -15,    1,  -37,   -6,   -7,  -50,  -10,  -10}    },

					// tour
					{
						{   7,    5,    6,    6,    7,    6,   11,   10 },
						{  35,   34,   35,   38,   38,   35,   34,   35 },
						{   3,   -2,   -1,   -2,   -2,    1,   -2,    3 },
						{   0,   -3,   -2,   -3,   -4,   -6,   -3,    2 },
						{  -5,   -7,   -3,   -4,   -5,   -5,   -9,   -6 },
						{  -8,   -3,   -8,    4,    4,   -7,    2,    2 },
						{ -10,   -7,   -6,   -3,   -4,   -8,   -9,  -10 },
						{  -6,   -5,    3,    9,    9,    3,   -6,   -4 }   },

						// dame
						{
							{ -10,  -10,  -10,  -10,   10,    8,    8,    8 },
							{  -4,   -6,    0,    0,    0,    8,    8,   10 },
							{  -4,    0,    6,   10,    8,   10,    6,   12 },
							{   6,   -4,   -6,   -6,   -8,    4,    4,    2 },
							{   4,   -6,   -4,    2,   -6,    0,    4,    0 },
							{   0,   10,   -2,   14,   -6,    4,    0,    0 },
							{  -6,   -4,   12,   12,    6,    0,   -4,   -8 },
							{  -8,   -4,    0,   10,    4,   -4,   -6,   -8 }   },

							// roi
							{
								{ -60,   54,   47,  -99,  -99,   60,   83,  -62},
								{ -32,   10,   55,   56,   56,   55,   10,    3},
								{ -62,   12,  -57,  -50,  -67,   28,   37,  -31},
								{ -55,   50,   11,   -4,  -19,   13,  -35,  -49},
								{ -55,  -43,  -52,  -28,  -51,  -47,  -40,  -50},
								{ -47,  -42,  -43,  -79,  -64,  -42,  -59,  -42},
								{  -4,    3,  -14,  -90, -100,  -38,   13,    4},
								{  37,   60,   40,  -120, -100,  -30,   60,   48}   }
	};

	// En fin de partie
	int _pieces_pos_end[6][8][8]{
		// pion
		{
			{   0,    0,    0,    0,    0,    0,    0,    0},
			{ 150,  150,  150,  150,  150,  150,  150,  150},
			{  75,   75,   75,   75,   75,   75,   75,   75},
			{  40,   40,   40,   40,   40,   40,   40,   40},
			{  20,   20,   20,   20,   20,   20,   20,   20},
			{  10,   10,   10,   10,   10,   10,   10,   10},
			{ -20,  -40,  -30,    0,    0,  -30,  -40,  -20},
			{   0,    0,    0,    0,    0,    0,    0,    0}    },

			// cavalier
			{
				{ -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50},
				{ -25,    0,    0,    0,    0,    0,    0,  -25},
				{ -25,    0,   10,   25,   25,   10,    0,  -25},
				{ -25,    0,   25,   50,   50,   25,    0,  -25},
				{ -25,    0,   25,   50,   50,   25,    0,  -25},
				{ -25,    0,   10,   25,   25,   10,    0,  -25},
				{ -25,    0,    0,    0,    0,    0,    0,  -25},
				{ -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50}   },

				// fou
				{
					{ -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50},
					{ -25,    0,    0,    0,    0,    0,    0,  -25},
					{ -25,    0,    5,    5,    5,    5,    0,  -25},
					{ -25,    0,    5,   10,   10,    5,    0,  -25},
					{ -25,    0,    5,   10,   10,    5,    0,  -25},
					{ -25,    0,    5,    5,    5,    5,    0,  -25},
					{ -25,    0,    0,    0,    0,    0,    0,  -25},
					{ -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50}   },

					// tour
					{
						{   5,   15,   15,   15,   15,   15,   15,    5},
						{  50,   50,   50,   50,   50,   50,   50,   50},
						{  -5,    0,    0,    0,    0,    0,    0,   -5},
						{  -5,    0,    0,    0,    0,    0,    0,   -5},
						{  -5,    0,    0,    0,    0,    0,    0,   -5},
						{  -5,    0,    0,    0,    0,    0,    0,   -5},
						{  -5,    0,    0,    0,    0,    0,    0,   -5},
						{  10,   10,   10,   10,   10,   10,   10,   10}   },

						// dame
						{
							{ -40,  -30,  -20,  -10,  -10,  -20,  -30,  -40},
							{ -30,   37,   50,   50,   50,   50,   37,  -30},
							{   0,   45,   60,   75,   75,   60,   45,    0},
							{   0,   50,   60,  100,  100,   60,   50,    0},
							{ -10,   50,   50,  100,  100,   50,   50,  -10},
							{ -20,   50,   50,   50,   50,   50,   50,  -20},
							{ -40,   25,   25,   40,   40,   25,   25,  -40},
							{ -60,  -50,  -40,  -30,  -30,  -40,  -50,  -60}   },

							// roi
							{
								{-60, -45, -30, -15, -15, -30, -45, -60},
								{ -45, 54, 75, 75, 75, 75, 54, -45},
								{ 0, 66, 90, 111, 111, 90, 66, 0},
								{ 0, 75, 90, 150, 150, 90, 75, 0},
								{ -15, 75, 75, 150, 150, 75, 75, -15},
								{ -30, 75, 75, 75, 75, 75, 75, -30},
								{ -60, 36, 36, 60, 60, 36, 36, -60},
								{ -90, -75, -60, -45, -45, -60, -75, -90}	}
	};

	// Constructeur par défaut
	Evaluator();

	// Constructeur par copie
	Evaluator(const Evaluator &evaluator);

	// Opérateur de copie
	Evaluator& operator=(const Evaluator &evaluator);
};