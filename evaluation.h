// Evaluateur de position (heuristiques)
class Evaluator {
    public:


    // Paramètres d'évaluation

    // Coefficients des heuristiques
    float _piece_value = 1.0;
    float _piece_activity = 0.0006;
    float _piece_positioning = 0.02;
    float _random_add = 0.0;
    float _bishop_pair = 0.4;
    float _castling_rights = 0.5;
    float _player_trait = 0.15;
    float _king_safety = 0.005;
    float _pawn_structure = 0.01;
    float _attacks = 0.01;
    float _defenses = 0.0025;
    float _kings_opposition = 0.75;
    float _push = 1.00;
    float _rook_open = 0.01;
    float _rook_semi = 0.01;
    float _square_controls = 0.01;


    // Valeurs des pièces en début de partie (pion, cavalier, fou, tour, dame, roi)
    int _pieces_value_begin[6] = {95, 320, 340, 460, 980, 0};

    // Valeurs en fin de partie
    int _pieces_value_end[6] = {95, 310, 350, 585, 1020, 0};

    // Positionnement des pièces

    // En début de partie
    int _pieces_pos_begin[6][8][8] {

        // pion
        {   {   0,    0,    0,    0,    0,    0,    0,    0},
            {  78,   83,   86,  130,  130,   82,   85,   90},
            {  37,   29,   21,  120,  125,   60,   44,   57},
            { -17,   16,   20,   75,   80,   30,   35,   33},
            { -25,    0,   40,   50,   65,   10,  -10,  -23},
            { -25,    0,   20,   25,   35,  -25,   20,  -19},
            { -30,  -10,  -30,   10,  -30,   20,   20,  -20},
            {   0,    0,    0,    0,    0,    0,    0,    0}   },

        // cavalier
        {   { -80,  -53,  -75,  -75,  -10,  -55,  -58,  -70},
            {  -3,   -6,   50,  -36,    4,   62,   -4,  -14},
            { -10,   67,   25,   74,   73,   60,   62,   40},
            { -10,   24,   40,   55,   50,   70,   15,   20},
            { -10,    5,   31,   45,   40,   30,    2,    0},
            { -18,   10,   25,   22,   18,   35,   20,  -14},
            { -40,  -30,    2,    5,    2,    0,  -23,  -25},
            { -74,  -40,  -46,  -34,  -19,  -25,  -60,  -59}   },

        // fou
        {   { -59,  -78,  -82,  -76,  -23, -107,  -37,  -50},
            { -11,   20,   35,  -42,  -39,   31,    2,  -22},
            {  -9,   39,  -32,   41,   52,  -10,   28,  -14},
            {  25,   20,   20,   34,   26,   25,   20,   10},
            {  13,   10,   35,   23,   17,   30,    0,   17},
            {  14,   25,   24,   30,   25,   25,   20,   15},
            {  19,   40,   11,   10,   20,    6,   45,   16},
            { -30,    2,  -15,  -12,  -14,  -40,  -20,  -20}   },

        // tour
        {   {  35,   29,   33,   34,   37,   33,   56,   50},
            {  75,   70,   75,   90,   90,   75,   70,   75},
            {  19,  -10,   -5,  -10,  -10,    5,  -10,   15},
            {   0,  -15,  -10,  -13,  -18,  -30,  -19,   10},
            { -28,  -35,  -16,  -21,  -23,  -29,  -46,  -30},
            { -42,  -18,  -42,   20,   20,  -35,   10,   10},
            { -53,  -38,  -31,  -16,  -19,  -43,  -44,  -53},
            { -30,  -24,   15,   45,   45,   15,  -31,  -22}   },

        // dame
        {   { -50,  -50,  -50,  -50,   50,   40,   40,   40},
            { -20,  -30,    0,    0,    0,   40,   40,   50},
            { -20,    0,   30,   50,   40,   50,   30,   60},
            {  30,  -20,  -30,  -30,  -40,   20,   20,   10},
            {  40,  -30,  -20,  -40,  -60,    0,   20,    0},
            {   0,   50,  -10,   70,  -50,   20,    0,    0},
            { -40,  -20,   60,   60,   30,    0,  -20,  -40},
            { -80,  -40,  -20,   80,   20,  -40,  -40,  -80}   },

        // roi
        {   { -60,   54,   47,  -99,  -99,   60,   83,  -62},
            { -32,   10,   55,   56,   56,   55,   10,    3},
            { -62,   12,  -57,  -50,  -67,   28,   37,  -31},
            { -55,   50,   11,   -4,  -19,   13,  -35,  -49},
            { -55,  -43,  -52,  -28,  -51,  -47,  -40,  -50},
            { -47,  -42,  -43,  -79,  -64,  -32,  -29,  -32},
            {  -4,    3,  -14,  -90, -100,  -18,   13,    4},
            {  37,   60,   40,  -64,  -50,  -10,   60,   48}   }

    };

    // En fin de partie
    int _pieces_pos_end[6][8][8] {

        // pion
        {   {   0,    0,    0,    0,    0,    0,    0,    0},
            { 100,  100,  100,  100,  100,  100,  100,  100},
            {  50,   50,   50,   50,   50,   50,   50,   50},
            {  25,   25,   25,   25,   25,   25,   25,   25},
            {  20,   20,   20,   20,   20,   20,   20,   20},
            {  10,   10,   10,   10,   10,   10,   10,   10},
            { -20,  -40,  -30,    0,    0,  -30,  -40,  -20},
            {   0,    0,    0,    0,    0,    0,    0,    0}   },

        // cavalier
        {   { -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50},
            { -25,    0,    0,    0,    0,    0,    0,  -25},
            { -25,    0,   10,   25,   25,   10,    0,  -25},
            { -25,    0,   25,   50,   50,   25,    0,  -25},
            { -25,    0,   25,   50,   50,   25,    0,  -25},
            { -25,    0,   10,   25,   25,   10,    0,  -25},
            { -25,    0,    0,    0,    0,    0,    0,  -25},
            { -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50}   },

        // fou
        {   { -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50},
            { -25,    0,    0,    0,    0,    0,    0,  -25},
            { -25,    0,    5,    5,    5,    5,    0,  -25},
            { -25,    0,    5,   10,   10,    5,    0,  -25},
            { -25,    0,    5,   10,   10,    5,    0,  -25},
            { -25,    0,    5,    5,    5,    5,    0,  -25},
            { -25,    0,    0,    0,    0,    0,    0,  -25},
            { -50,  -25,  -25,  -25,  -25,  -25,  -25,  -50}   },

        // tour
        {   {   5,   15,   15,   15,   15,   15,   15,    5},
            {  20,   25,   25,   25,   25,   25,   25,   20},
            {  -5,    0,    0,    0,    0,    0,    0,   -5},
            {  -5,    0,    0,    0,    0,    0,    0,   -5},
            {  -5,    0,    0,    0,    0,    0,    0,   -5},
            {  -5,    0,    0,    0,    0,    0,    0,   -5},
            {  -5,    0,    0,    0,    0,    0,    0,   -5},
            {  10,   10,   10,   10,   10,   10,   10,   10}   },

        // dame
        {   { -40,  -30,  -20,  -10,  -10,  -20,  -30,  -40},
            { -30,   37,   50,   50,   50,   50,   37,  -30},
            {   0,   45,   60,   75,   75,   60,   45,    0},
            {   0,   50,   60,  100,  100,   60,   50,    0},
            { -10,   50,   50,  100,  100,   50,   50,  -10},
            { -20,   50,   50,   50,   50,   50,   50,  -20},
            { -40,   25,   25,   40,   40,   25,   25,  -40},
            { -60,  -50,  -40,  -30,  -30,  -40,  -50,  -60}   },

        // roi
        {   { -70,  -50,  -20,  -10,  -10,  -20,  -50,  -70},
            { -50,    0,   20,   30,   30,   20,    0,  -50},
            { -10,   20,   40,   40,   40,   40,   20,  -10},
            {   0,   30,   40,   50,   50,   40,   30,    0},
            { -20,   20,   30,   50,   50,   30,   20,  -20},
            { -40,    5,   15,   30,   30,   15,    5,  -40},
            { -60,  -20,    5,   10,   10,    5,  -20,  -60},
            { -80,  -70,  -60,  -50,  -50,  -60,  -70,  -80}   }


    };


    // Constructeur par défaut
    Evaluator();



};